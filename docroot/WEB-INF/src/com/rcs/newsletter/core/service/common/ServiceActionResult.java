package com.rcs.newsletter.core.service.common;

import java.io.Serializable;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

/**
 * Class made specially for transporting responses from the service layer. <br />
 * Please avoid the use of exceptions to perform this task. Exceptions are meant
 * for other purposes like for exceptional situations.
 * @author juan
 */
public class ServiceActionResult<T> implements Serializable {

    private static final long serialVersionUID = 1L;
    private final boolean success;
    private final T payload;
    private final List<String> validationKeys;
    private List<String> messages;

    protected ServiceActionResult(boolean success, T payload, List<String> validationKeys) {
        this.success = success;
        this.payload = payload;
        this.validationKeys = validationKeys;
    }
    
    protected ServiceActionResult(boolean success, T payload, List<String> validationKeys, List<String> messages) {
        this.success = success;
        this.payload = payload;
        this.validationKeys = validationKeys;
        this.messages = messages;
    }

    /**
     * Return the payload of this service action result. This is intended
     * to aid on the lack of return types.
     * @return 
     */
    public T getPayload() {
        return payload;
    }

    /**
     * Check if this service action result represents a successful status.
     * @return 
     */
    public boolean isSuccess() {
        return success;
    }

    /**
     * Get the list of validation keys generated by the service.
     * @return 
     */
    public List<String> getValidationKeys() {
        return validationKeys;
    }

    /**
     * Add a validation key to this service result.
     * @param key 
     */
    public void addValidationKey(String key) {
        validationKeys.add(key);
    }

    /**
     * Build a successful service result.
     * @param <T>
     * @param payload
     * @param keys
     * @return 
     */
    public static <T> ServiceActionResult<T> buildSuccess(T payload, String... keys) {

        LinkedList<String> keysList = new LinkedList<String>();
        keysList.addAll(Arrays.asList(keys));

        return new ServiceActionResult<T>(true, payload, null, keysList);
    }
    
    /**
     * Build a successful service result.
     * @param <T>
     * @param payload
     * @param keyList
     * @return 
     */
    public static <T> ServiceActionResult<T> buildSuccess(T payload, List<String> keyList) {
        return new ServiceActionResult<T>(true, payload, null, keyList);
    }
    
    /**
     * Build a failure service result. This will also mark the transaction as 
     * rollback only.
     * @param <T>
     * @param payload
     * @param keys
     * @return 
     */
    public static <T> ServiceActionResult<T> buildFailure(T payload, String... keys) {
        LinkedList<String> keysList = new LinkedList<String>();
        keysList.addAll(Arrays.asList(keys));
        
        //rollback the transaction.
        TransactionAspectSupport.currentTransactionStatus().isRollbackOnly();
        
        return new ServiceActionResult<T>(false, payload, keysList);
    }

    /**
     * Build a failure service result. This will also mark the transaction as
     * rollback only.
     *
     * @param <T>
     * @param payload
     * @param keys
     * @return
     */
    public static <T> ServiceActionResult<T> buildFailure(T payload, List<String> keys){
        //rollback the transaction.
        TransactionAspectSupport.currentTransactionStatus().isRollbackOnly();
        return new ServiceActionResult<T>(false, payload, keys);
    }

    /**
     * @return the messages
     */
    public List<String> getMessages() {
        return messages;
    }

    /**
     * @param messages the messages to set
     */
    public void setMessages(List<String> messages) {
        this.messages = messages;
    }
    
    /**
     * Add a new message
     * @param message 
     */
    public void addMessage(String message){
        this.messages.add(message);
    }
}
